import requests, json
import logging
import threading
import time

def thread_function(name):
    headers = {'Content-type': 'application/json'}
    data = json.dumps({"image": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAoHCBUWEhgVFRUREhgREhgYEhESGBEREhESGBgZGRgYGBgcIS4lHB4rHxgZJjgmKy8xNTU1GiQ7QDszPy40NTEBDAwMBgYGEAYGEDEdFh0xMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMf/AABEIAOEA4QMBIgACEQEDEQH/xAAbAAACAwEBAQAAAAAAAAAAAAADBAACBQYBB//EADcQAAICAAQEAwYFAwQDAAAAAAECABEDBCExBRJBUWFxgQYiMpGh8BNCUrHB0eHxI2JyghSSsv/EABQBAQAAAAAAAAAAAAAAAAAAAAD/xAAUEQEAAAAAAAAAAAAAAAAAAAAA/9oADAMBAAIRAxEAPwDhESGVJ4ohBAEyQDLHCsGyQALGcIQQw45gJAuqT0pDoksyQFGEGVjLJKFIA1EvyT3lhMMX0gVwsON4SS+DgntG0wRAJl5qYAiKIBHMu47iBp4IjASLYWIoFkiXTiOH+oQDOJz/ABt9DNnE4hh7Bxr5zE4lT3WvlA43GHvGUKxzNYRB2ixWAFllGSMFZUrAWZYNljbpBMICbrBVGWWCKwB8s9lqkgPB4VGigjWEIDKLLlJ4gljAGqaxtEgcM6xzDGkCyrKvLyn4bHYGBTlnn4Zj+Dk+rGoycr+n+sDNTLfq+UMjKNAAJbHQruOu0XujW3h19IDqv1kZ+sWUkaj+gjaJzCiKI2Pn3EDzCxLF/dS7YZOov+BFMMlcQIdmBrwPa5qIRy12NefjAy8zmmUUSTBYecsXcaz+XG2p0+kxXwSt0dB/O0DQXN2aOk0ssLFiY2QyDkB2sLfbU+NTV4ViA6Xr2O5rt3gWzmXBrmBIPUC6PjEcbhmhK61uPCdAy6eUDlwPxPDl17QOSbDlSkez2Hy4jDsYoYAGWAZY20C4gKOsDyxt1gisAHLPIWpIB1SMYQgwsIhgNKJHWeYRhyLgAQRvBWCGHG8RQmHza3zAaUTrAIeVRbH063A4mcGwIF9JnPjMx3bX1Pl2HSDY+fzJ6db/AIgaS5o79PPrHMvm6/V66XMXLua01A86jNHmqrBIsjYg9PHp84G1jFXU1R0+R/rEHyrhQxVgLrawfnCZYG677EakitvH+020zK4ZXDeqKDmDalmJoUO+3zgc8nmfKr8xHMPQab1p0JF7f2h2wVKnUimJR/8AswHmNBF8RSBRBHWhtfh4dYFc8Q1MKOvukdDWoh8nj8y2DZqiu5B2MRyw3B6G78/8zzMYhwcyK+HEFg+Oob5iBuZnDDEiwNFN+hH7xJ+FhmGtijem9f5EMuMG5ewceuuvoK+k2MFFFHa7v+b8IHOcXxThYJJANLSg9/EeExPZ/GLCxRYMWF9CDZHlVzpfbPLlsueXvddartOC9nccrigG9LobanckQPpmH7yg9xcAi0/NdKiksOh7RjKj3FBP5Rt2MT4o/KhA/OfpA5/OYhd2Y/mMUJjbpF3SAEypEKVlGEADiCIh2EEwgDqSWqSAyVnlQyrc8ZIEwzGkMUELhvA0MBLOstxDKl2DDYUAn5Qo2quo+ekrgPpcPlsfUqRasRf+0/qHjAxsxh8rMo7n/sAO/wAoMdBvzE6dOUDTy2mzxTJnRl1NWK2Zep8CL+kzAmh+laabDWBbBFfwN/vX9o1hodBY90A6nQkadPSAwBXmK1+d/Ooz49NvIEdfWoBcg/8AqKNga22DV+13FvanFYZsL79BFrlYgbdhHOEm8UdbrTcWBV/v84HjaBs25090qu/xEKNx1gFymJ7q3dAUrKQaNDY9NRt5iExscUKIOmwAo97HlXaJh+mig/p92z41DujCiw6Wb1PL+qwPeAvrALldzYo9+4vr3/vD8TwAwR9+RlvuAauDTcHQ9DVHfqp8fWPYSe7RAK17x69hpALlsmrUALvUAaAaftoT6zRwME3uOUUL6/dVFfZ81icpNhSKPa7HyozWx8GjptzWR1Yg2PpAVz2VD4bA6Fh4GtNp8nOB+FnOQ2Pe8tJ9pCad/Tbwnzv264ayYiYwAA5gGPidoHT5I3hqfpMXiuNzPXRdPWa/CXDZewR8F+tGc+4s+sCgEFiJDhZVxASZYNljDiBMBdlgyIy6wLiAGpJapIGgiSzJPFfSXuApiLUEG1jjpcXKawHcFtI9gYcRyyzVwhA8R+S+qn4lPTxXx0mfmcIEcyC1NWB+VvKP4os1M3GZlYlDR69mHiIFEofLXzhFYkeRrzAoj9j8pVXV9dFe/hPwt4j+k92sfegH9/nA0eCrWIuh1Hy1B0iGZPPj4h0N4jcpGp5b06iaWQxAgLmgFBPkf6H+ZkZXDYjc2wv4qBs2e4uAzgADYLYOwA1P10hnxyzc2u22iL200133nmHlWsgtV7BhRbyN/tHsDIlfeOo6ig59C2sAWXVuYDSmoFbU0e19NdNe/SOq4rqaAu7B5vhIPiAfupZcupGjL4E9O2lCvI731gcN3DVoBXbSj38dagHT3cXqOvN3AIJ+/DxnU1YsbldG/n77Tma0J0JWqU9d9PUD6Tpcm4Kqp9fEir9N4BsphDlANgD6+f7wPFeEJj4bIw0bYncVrYjLIeYnovl4ffpA5niio3KTqP0jm9T2EDm+D5VsLDfCYWU5lH/E6hvrMPludH7RZhgVdGI5wQSNLnPrAryQTpGCJV4Gc6QLLHnWLMkBciBdYdxAuYA6knkkBkNLq0ADCLAZAlXSWQwnLAmXEfw2ilVGsP4YADjHmOkSxHJb127iPsNYnjqA3btABi4QvSepjECnth3/AD79+sZxEsyi4fj/AO33/MCPmwy8ighTXMX/ADAdK6bCN8PRb6eXKxH0EAmD+Ya/8dh6x3JPyasCPSyagayCh8LetLfyOs8bGVd3I8Ob8T0Io/vOW4z7SlCFRSL+In4je2g8QNJjHi2I7DDVcRnYgIpLHmYkaAKVAsXWh1rvA7LOZ5boDEfQ6ke6SLIWrsd/hj/D8MnDV20LLZRtSLFaE6/p6T5zwvirF1522ag1aa+J2/vPoORzilFFk722x5bNf/VfYgaOLhLfMOUG7s6nqL36Ej5TX4YKF9hoDVgA2fKZaYvNWmpHXQa+f3vNLKNYoVQNbadxr8/pAfXE1J0ojTfafL+M5xcfPqiMz3iKWZTiIEItWQgmm1o8wE7zi2ZKYbHUkhuX00qvT6zkPYvgyvitmWXkJY0ijlUE76awOk9pcL/SQkXykixv/ecyH+x1nXe1Nf8Ajgf7xOMw4DIlWEgaDd4AXMCxhMQwBaALEEXKxp4BxAHyySSQIsKsADCIYDKtDI0UUwqtAYd45gfDM1jNHKfDA8cTNzRO+1GauJMzMpYgHQcyg/PwjuDgqwvXxApvoRFeFrujdRYjLcyGwdIDQwwoo2L8Bp59pdE6jlYdR8B+oqJrmrOx+en1mjl2sakDT/GmxgY3tF7Nh1tAQwXQdwDsKG99ROCxcq6NyseXSjvdeWxn17ZelHWlDDzNzH4jk0c6rQYjcb0e/Ua1rA+cZjGBCKo5VS+XUszFiCWY0NTQ+QnU8K4lyIAx6eFj5iVzHCB+IPdNBqsLY0F35aV43GBw0GyRv+XQAjz3B6+cDouDZguvMdydL093fadJwpht2Jsit+/yM5jIPyrQ27iiKIAO318DN3h2JR0IqjZFXYYCtOu31gbPFMpzqDty0R38bgOE5VEUhBQOta1fcTUwiCNRuB5VX9zF/wAMo/h3/iBk+1qf6KXvz6fKcbVGdf7Z4gpB5mci0CrtFmeGcwbJAGxlWEuRKtAExgHMO8A8AMkkkDwGWVoEGXBgMq0sGiytLBoDamaeV2mVhNNTK7QDMsRzSVrNZcPSAxsCxABl8MnlcdJpYuDzDzlcjlDy6x1UoQMJsMq3r8prZYadbPbT7+UmZy4InuW0A38zqBAOBzblW+dg+u0vi4YA0HlYAvy2I+U8VyuvN6HX11g8V7q7PidPQAdPGAhmyNqutqAVVvx7xVQTpQrqaO/XQC5bM4+tC2o7UtA/f7TzCY6XzeA1+dDYQG8DDB0Gh/2jffUAH95s8PUq2ug/N6a/PTxiOSwr6770Gr5/D9JqjDA2A+dUIGxlHvTt9Pv+I8RYqvnMTKYtGydb169tPXSbOE8Djvapj+KoP5U/mYHLOt9scH4HruCZyZMDwpBMsOGlGgLMIExl1i7CAF1gHEZYwLrAXqSE5ZIChkuUuQmBbmlg8CZ5cDSyzXNTJNTTBymJrU38ot0YHQYCgiXbKgxbLqZoYQMC2AlCqhDh3DKmkC2KBAC+BAtlTuI4HBjGGhgYvPW+h6z2wfAVvv8AzNfM8PDi6ANb95hjC5WKncdDf0gevllNGi3roD4+M8VSDqia9yb0HcmMYgNDUAeJoE+sEjnQB0thYBINjvVQHsBqqgb+l+v3pNDnJSyKK7jrXSI4QtCLCkj4uUaHuKqwLimPmGQ++wZW0u6I01Pqf3gOZfMhmIvYnvdff7TbyWOOv+JwycYRXK6tuCU96r/fvpPcT2hPNypzgCgSRqxOvpX8wOy42vPl3Nc3KbANjYzhcXfZfEAnSdHluJDGymM4ptVQgbc4Av11nOUL+GvA3+9wKV4VPTLMNPsiA5oBOWL4whOeBxWgKu0oTLPBOYHlyQdz2AiDJcoTIDAsTKgWanjGP5DL3APkspNzJLy7y2RysdfKdoD2W5SJoJQEwsthODG8xilRvAczGP2iVkznc5xnlb1mlw3iasNSIGthIRNLKuYrlsRT1EfwwBrpAYdtJk5vKh/MbHxmmRcYwcqOsDmMxhMBswI2JOnmPCLlzRPvBarlAtgQenYHt9Z3mPw5Hw+VgNRp3B7jxnK53gz4be6PxFU/EPiB7GArlWblAqyRzcwUoPAEd6nGe2WbxkKEEkEmya1Jquv3U7HCwxdj3WPxHXa+oJ7aTC9pcDnTlBHMCGUsq4gBB0sGBwKcTcncAehrxjTZ3EcVzHQb67bxJ+H4gbl/DxL68qlwfEV0mvw3gGM9HFH4SE+9ZH4hXryr0Pia9YG77LYzDJ4iNYXEzFoe4VV5yPCwB53NFDQqVpaCqAoRQqKNlUbD76yjNpA8fEgrgmOssGqBLlGEgaesdIAHizw+JF2gDkkkgIGVntyrGBbD3m/w1QanOK2s6ThRoXA6TK0Jp4YExcB7mhhOYGmmGKuY/GHAUx58xSzmOO5vQiBzeafmcntJh4xXUGoIyjGBs5bjzpvNvI+0vMQLnEOYXIPWIPOB9k4Vi89HvOgyyDecd7P4/uAzpEzOm8DV5olnFBFRZs5CK9rA5ji2CV94dJiPjMa1uu4BnS8accpBnLmBRmY9TB8pjKrpBYgoQBqsHiiEQ6QWI2kBVzBM8u0C4gERp6zwIaeO0CrtF3eWdpTluBTmknv4ZkgZ4MhEqplrgRRrNjKY+wmQYTCxaMDuMliCo62YVROQy2e8Z5nOJHoYG9j8TGus57PY/OYkuYY9ZcGAMrPGWXrWe1AUOhlsA04MIyayoSB9A4DmxyDWdJgZgMN58vyGaKirm/w/ixB1MDukAjQevWc9gcTBANxjE4mK3gLe0OJ2nOFzc0s/j85ijoIFQ8BivZnmK/jAF9YFy8XxcSTGftFqJMAga544l1SoPEaBUJBuJf8AEgcR4ASYQaCBJkd9IF+aSK/iSQExLAxZMWMLAuJJ4TBl9YDCtJyyiNCFoEEnPKs8qIDKNCrF8OFWBYiDAl5ZUgWwkjqWIBFhg9QHkx2A3jAzB7mII8YYiAyuPUriZmLXchECj4huUV9ZZgJUCB7yXLLoZ6Gi+NiGAV8WK4jXBcxljAqWlGMjGUZoFWMDiNPXeAdoHlz2UueQMvCePYT6TNSFGJAffEgfxIscSVLwHUxYVHuZ6PHMEwGEWzGVSAQy5eAaS4MGe80AoMKhg0EjGoDHPIWglMsWqAzhvGBiRBHhg8BxWnrvAo89ZoFlM8ZoP8SVBswGF2iuYbWoyzACZ2I9mBZWkLwZMoWgXcxd3nr4kC7wKs0GzSM0GzQPbkg7kgICVMkkDwSGeyQLYcey8kkBpJaSSB7J1kkgNYcriSSQLpJiSSQCJLieyQDYcmJPZIAjLYckkD3G2iRkkgR4N5JIAHlGkkgCMG0kkDySSSB//9k="})

    for i in range(100):
        x = requests.post("http://localhost:9000/image_inference", data=data, headers=headers)
        print(x.json())

if __name__ == "__main__":
    format = "%(asctime)s: %(message)s"
    logging.basicConfig(format=format, level=logging.INFO,
                        datefmt="%H:%M:%S")
    logging.info("Main    : before creating thread")

    x = threading.Thread(target=thread_function, args=(1,))
    x.start()

    y = threading.Thread(target=thread_function, args=(1,))
    y.start()

    z = threading.Thread(target=thread_function, args=(1,))
    z.start()

    w = threading.Thread(target=thread_function, args=(1,))
    w.start()

    x.join()
    y.join()
    z.join()
    w.join()
    print("done")


