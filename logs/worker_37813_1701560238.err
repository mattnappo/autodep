[2023-12-02T23:37:18Z INFO  autodep::worker] starting new worker on port 37813 with model TorchModel { filename: "./models/resnet18.pt", model: CModule { c_module: 0x5622b32bcdc0 } }
[2023-12-02T23:37:19Z DEBUG h2::codec::framed_write] send frame=Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384, max_header_list_size: 16777216 }
[2023-12-02T23:37:19Z DEBUG h2::proto::connection] Connection; peer=Server
[2023-12-02T23:37:19Z DEBUG h2::codec::framed_write] send frame=WindowUpdate { stream_id: StreamId(0), size_increment: 983041 }
[2023-12-02T23:37:19Z DEBUG h2::codec::framed_read] received frame=Settings { flags: (0x0), enable_push: 0, initial_window_size: 2097152, max_frame_size: 16384 }
[2023-12-02T23:37:19Z DEBUG h2::codec::framed_write] send frame=Settings { flags: (0x1: ACK) }
[2023-12-02T23:37:19Z DEBUG h2::codec::framed_read] received frame=WindowUpdate { stream_id: StreamId(0), size_increment: 5177345 }
[2023-12-02T23:37:19Z DEBUG h2::codec::framed_read] received frame=Settings { flags: (0x1: ACK) }
[2023-12-02T23:37:19Z DEBUG h2::proto::settings] received settings ACK; applying Settings { flags: (0x0), initial_window_size: 1048576, max_frame_size: 16384, max_header_list_size: 16777216 }
[2023-12-02T23:37:19Z DEBUG h2::codec::framed_read] received frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:19Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(1) }
[2023-12-02T23:37:19Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(1), flags: (0x1: END_STREAM) }
[2023-12-02T23:37:19Z INFO  autodep::worker] got inference request:
[2023-12-02T23:37:19Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(1), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:19Z DEBUG h2::codec::framed_write] send frame=Data { stream_id: StreamId(1) }
[2023-12-02T23:37:19Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(1), flags: (0x5: END_HEADERS | END_STREAM) }
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_read] received frame=Headers { stream_id: StreamId(3), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(3) }
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(3), flags: (0x1: END_STREAM) }
[2023-12-02T23:37:20Z INFO  autodep::worker] got status request:
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(3), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_write] send frame=Data { stream_id: StreamId(3) }
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(3), flags: (0x5: END_HEADERS | END_STREAM) }
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_read] received frame=Headers { stream_id: StreamId(5), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(5) }
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(5), flags: (0x1: END_STREAM) }
[2023-12-02T23:37:20Z INFO  autodep::worker] got inference request:
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(5), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_write] send frame=Data { stream_id: StreamId(5) }
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(5), flags: (0x5: END_HEADERS | END_STREAM) }
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_read] received frame=Headers { stream_id: StreamId(7), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(7) }
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(7), flags: (0x1: END_STREAM) }
[2023-12-02T23:37:20Z INFO  autodep::worker] got status request:
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(7), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_write] send frame=Data { stream_id: StreamId(7) }
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(7), flags: (0x5: END_HEADERS | END_STREAM) }
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_read] received frame=Headers { stream_id: StreamId(9), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(9) }
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(9), flags: (0x1: END_STREAM) }
[2023-12-02T23:37:20Z INFO  autodep::worker] got inference request:
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(9), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_write] send frame=Data { stream_id: StreamId(9) }
[2023-12-02T23:37:20Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(9), flags: (0x5: END_HEADERS | END_STREAM) }
[2023-12-02T23:37:21Z DEBUG h2::codec::framed_read] received frame=Headers { stream_id: StreamId(11), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:21Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(11) }
[2023-12-02T23:37:21Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(11), flags: (0x1: END_STREAM) }
[2023-12-02T23:37:21Z INFO  autodep::worker] got status request:
[2023-12-02T23:37:21Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(11), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:21Z DEBUG h2::codec::framed_write] send frame=Data { stream_id: StreamId(11) }
[2023-12-02T23:37:21Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(11), flags: (0x5: END_HEADERS | END_STREAM) }
[2023-12-02T23:37:21Z DEBUG h2::codec::framed_read] received frame=Headers { stream_id: StreamId(13), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:21Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(13) }
[2023-12-02T23:37:21Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(13), flags: (0x1: END_STREAM) }
[2023-12-02T23:37:21Z INFO  autodep::worker] got inference request:
[2023-12-02T23:37:21Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(13), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:21Z DEBUG h2::codec::framed_write] send frame=Data { stream_id: StreamId(13) }
[2023-12-02T23:37:21Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(13), flags: (0x5: END_HEADERS | END_STREAM) }
[2023-12-02T23:37:24Z DEBUG h2::codec::framed_read] received frame=Headers { stream_id: StreamId(15), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:24Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(15) }
[2023-12-02T23:37:24Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(15), flags: (0x1: END_STREAM) }
[2023-12-02T23:37:24Z INFO  autodep::worker] got status request:
[2023-12-02T23:37:24Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(15), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:24Z DEBUG h2::codec::framed_write] send frame=Data { stream_id: StreamId(15) }
[2023-12-02T23:37:24Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(15), flags: (0x5: END_HEADERS | END_STREAM) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Headers { stream_id: StreamId(17), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(17) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(17), flags: (0x1: END_STREAM) }
[2023-12-02T23:37:33Z INFO  autodep::worker] got status request:
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(17), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Data { stream_id: StreamId(17) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(17), flags: (0x5: END_HEADERS | END_STREAM) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Headers { stream_id: StreamId(19), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(19) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(19), flags: (0x1: END_STREAM) }
[2023-12-02T23:37:33Z INFO  autodep::worker] got inference request:
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(19), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Data { stream_id: StreamId(19) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(19), flags: (0x5: END_HEADERS | END_STREAM) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Headers { stream_id: StreamId(21), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(21) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(21), flags: (0x1: END_STREAM) }
[2023-12-02T23:37:33Z INFO  autodep::worker] got status request:
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(21), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Data { stream_id: StreamId(21) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(21), flags: (0x5: END_HEADERS | END_STREAM) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Headers { stream_id: StreamId(23), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(23) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(23), flags: (0x1: END_STREAM) }
[2023-12-02T23:37:33Z INFO  autodep::worker] got inference request:
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(23), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Data { stream_id: StreamId(23) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(23), flags: (0x5: END_HEADERS | END_STREAM) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Headers { stream_id: StreamId(25), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(25) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(25), flags: (0x1: END_STREAM) }
[2023-12-02T23:37:33Z INFO  autodep::worker] got status request:
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(25), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Data { stream_id: StreamId(25) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(25), flags: (0x5: END_HEADERS | END_STREAM) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Headers { stream_id: StreamId(27), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(27) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(27), flags: (0x1: END_STREAM) }
[2023-12-02T23:37:33Z INFO  autodep::worker] got inference request:
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(27), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Data { stream_id: StreamId(27) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(27), flags: (0x5: END_HEADERS | END_STREAM) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Headers { stream_id: StreamId(29), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(29) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(29), flags: (0x1: END_STREAM) }
[2023-12-02T23:37:33Z INFO  autodep::worker] got status request:
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(29), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Data { stream_id: StreamId(29) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(29), flags: (0x5: END_HEADERS | END_STREAM) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Headers { stream_id: StreamId(31), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(31) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(31), flags: (0x1: END_STREAM) }
[2023-12-02T23:37:33Z INFO  autodep::worker] got inference request:
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(31), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Data { stream_id: StreamId(31) }
[2023-12-02T23:37:33Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(31), flags: (0x5: END_HEADERS | END_STREAM) }
[2023-12-02T23:37:36Z DEBUG h2::codec::framed_read] received frame=Headers { stream_id: StreamId(33), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:36Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(33) }
[2023-12-02T23:37:36Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(33), flags: (0x1: END_STREAM) }
[2023-12-02T23:37:36Z INFO  autodep::worker] got status request:
[2023-12-02T23:37:36Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(33), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:36Z DEBUG h2::codec::framed_write] send frame=Data { stream_id: StreamId(33) }
[2023-12-02T23:37:36Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(33), flags: (0x5: END_HEADERS | END_STREAM) }
[2023-12-02T23:37:36Z DEBUG h2::codec::framed_read] received frame=Headers { stream_id: StreamId(35), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:36Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(35) }
[2023-12-02T23:37:36Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(35), flags: (0x1: END_STREAM) }
[2023-12-02T23:37:36Z INFO  autodep::worker] got status request:
[2023-12-02T23:37:36Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(35), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:36Z DEBUG h2::codec::framed_write] send frame=Data { stream_id: StreamId(35) }
[2023-12-02T23:37:36Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(35), flags: (0x5: END_HEADERS | END_STREAM) }
[2023-12-02T23:37:37Z DEBUG h2::codec::framed_read] received frame=Headers { stream_id: StreamId(37), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:37Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(37) }
[2023-12-02T23:37:37Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(37), flags: (0x1: END_STREAM) }
[2023-12-02T23:37:37Z INFO  autodep::worker] got status request:
[2023-12-02T23:37:37Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(37), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:37Z DEBUG h2::codec::framed_write] send frame=Data { stream_id: StreamId(37) }
[2023-12-02T23:37:37Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(37), flags: (0x5: END_HEADERS | END_STREAM) }
[2023-12-02T23:37:37Z DEBUG h2::codec::framed_read] received frame=Headers { stream_id: StreamId(39), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:37Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(39) }
[2023-12-02T23:37:37Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(39), flags: (0x1: END_STREAM) }
[2023-12-02T23:37:37Z INFO  autodep::worker] got inference request:
[2023-12-02T23:37:37Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(39), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:37Z DEBUG h2::codec::framed_write] send frame=Data { stream_id: StreamId(39) }
[2023-12-02T23:37:37Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(39), flags: (0x5: END_HEADERS | END_STREAM) }
[2023-12-02T23:37:37Z DEBUG h2::codec::framed_read] received frame=Headers { stream_id: StreamId(41), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:37Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(41) }
[2023-12-02T23:37:37Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(41), flags: (0x1: END_STREAM) }
[2023-12-02T23:37:37Z INFO  autodep::worker] got status request:
[2023-12-02T23:37:37Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(41), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:37Z DEBUG h2::codec::framed_write] send frame=Data { stream_id: StreamId(41) }
[2023-12-02T23:37:37Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(41), flags: (0x5: END_HEADERS | END_STREAM) }
[2023-12-02T23:37:37Z DEBUG h2::codec::framed_read] received frame=Headers { stream_id: StreamId(43), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:37Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(43) }
[2023-12-02T23:37:37Z DEBUG h2::codec::framed_read] received frame=Data { stream_id: StreamId(43), flags: (0x1: END_STREAM) }
[2023-12-02T23:37:37Z INFO  autodep::worker] got inference request:
[2023-12-02T23:37:38Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(43), flags: (0x4: END_HEADERS) }
[2023-12-02T23:37:38Z DEBUG h2::codec::framed_write] send frame=Data { stream_id: StreamId(43) }
[2023-12-02T23:37:38Z DEBUG h2::codec::framed_write] send frame=Headers { stream_id: StreamId(43), flags: (0x5: END_HEADERS | END_STREAM) }
